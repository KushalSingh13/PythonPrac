1. Slice
def slice(obj, slicing_parameter):
    slicing_parameter = slicing_parameter.strip('[]')
    params = slicing_parameter.split(':')
    params = [int(x) if x else None for x in params]
    
    while len(params) < 3:
        params.append(None)
    
    start, stop, step = params
    return obj[start:stop:step]

print(slice('string', '[1]'))


2.DFA
def DFA_ends_with_b(text):
    state = 'q0'
    
    for char in text:
        if char == 'b':
            state = 'q1'
        elif char == 'a':
            state = 'q0'
        else:
            return "Rejected"
    
    return "Accepted" if state == 'q1' else "Rejected"
    
print(DFA_ends_with_b("bab"))
print(DFA_ends_with_b("baba"))
print(DFA_ends_with_b("babacb"))





3. Rom
def int_to_roman(num):
    num_mapping = {1: "I", 4: "IV", 5: "V", 9: "IX", 10: "X", 40: "XL", 50: "L", 90: "XC", 100: "C", 400: "CD", 500: "D", 900: "CM", 1000: "M"}
    roman = ''
    for n in sorted(num_mapping.keys(), reverse=True):
        count, num = divmod(num, n)
        roman += num_mapping[n] * count
    return roman

def rom(text, text_base):
    number = int(text, text_base)
    return int_to_roman(number)






4. Base Conversion
def base_conversion(text, text_base, output_base):
    # Convert the input text from the source base to decimal (base 10)
    number = int(text, text_base)
    
    # Handle the edge case where the number is zero
    if number == 0:
        return "0"
    
    # Convert the decimal number to the desired base
    result = ""
    while number > 0:
        result = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"[number % output_base] + result
        number //= output_base
    
    return result

# Testing the function
print(base_conversion("11", 2, 2))  # Output: 11
print(base_conversion("100", 2, 10))  # Output: 4
print(base_conversion("100", 2, 4))  # Output: 10
print(base_conversion("100", 2, 5))  # Output: 20
print(base_conversion("11", 2, 8))  # Output: 3
print(base_conversion("101", 2, 7))  # Output: 15
print(base_conversion("100", 10, 7))  # Output: 202
print(base_conversion("0", 10, 5))  # Output: 0

print(rom("101", 2))
print(rom("10", 8))
print(rom("10", 16))
print(rom("11", 5))
print(rom("013", 8))
