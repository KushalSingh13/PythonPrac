1. Printing Pattern  
  l=1 
         +
+               +
         -
l=2 
       
                    +
         +                    +
+                                     +
         +                     +
                     -
l=3 
      
                        +
             +                    +
       +                               +
 +                                          +
       +                                +
            +                     +
                       -

Code for this pattern is below:

def generate_pattern(levels):
    for l in range(1, levels + 1):
        
        num_plus = l + 2
        
      
        initial_padding = (levels - l) * 3
        
       
        space_between = l * 3
        
       
        row = " " * initial_padding + "+".join([" " * space_between for _ in range(num_plus)])
        
     
        row += " -"
        
       
        print(f"l={l}")
        print(row)
        print()
        

generate_pattern(3)






2. Printing Pattern
l=1 
         +
+               +
         -
l=2 
       
                    +
         +                    +
+                                     +
         -                     -
                     -
l=3 
      
                        +
             +                    +
       +                               +
 +                                          +
       +                                +
            +                     +
                       +

Code for this pattern is below:
def generate_pattern(levels):
    for l in range(1, levels + 1):
        total_symbols = 2**l - 1
        num_plus = total_symbols // 2 + 1
        num_minus = total_symbols // 2
        
        pattern = "+" * num_plus + "-" * num_minus
        print(f"Level {l}: {pattern}")


generate_pattern(3)





3. Modulo Function

Code for modulo function is given below:


def modulo(numerator, denominator):
    if denominator == 0:
        raise ValueError("Denominator cannot be zero.")
    
   
    abs_numerator = abs(numerator)
    abs_denominator = abs(denominator)
    
   
    remainder = abs_numerator
    while remainder >= abs_denominator:
        remainder -= abs_denominator
    
   
    if numerator < 0:
        remainder = -remainder
    
   
    if denominator < 0 and numerator >= 0:
        remainder += denominator
    
    return remainder




4. Count 

 Code for the count is given below:

def count_substring(string, substring, allow_overlap):
    count = 0
    start = 0

    while True:
       
        start = string.find(substring, start)

       
        if start == -1:
            break

      
        count += 1

        
        start += 1 if allow_overlap else len(substring)

    return count

