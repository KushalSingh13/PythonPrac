Decimal Subtraction using string manipulation 

def remove_leading_zeros(s):
    return s.lstrip('0') or '0'

def compare(a, b):
    if len(a) > len(b):
        return 1
    elif len(a) < len(b):
        return -1
    else:
        if a > b:
            return 1
        elif a < b:
            return -1
        return 0

def subtract_strings(a, b):
   
    if compare(a, b) < 0:
        a, b = b, a
        negative = True
    else:
        negative = False

    a = list(a)
    b = list(b)

    result = []
    carry = 0

    while b:
        digit_a = int(a.pop()) - carry
        digit_b = int(b.pop())

        if digit_a < digit_b:
            digit_a += 10
            carry = 1
        else:
            carry = 0

        result.append(str(digit_a - digit_b))

    while a:
        digit_a = int(a.pop()) - carry
        if digit_a < 0:
            digit_a += 10
            carry = 1
        else:
            carry = 0

        result.append(str(digit_a))

    result = remove_leading_zeros(''.join(result[::-1]))

    return '-' + result if negative else result

def subtract_decimals(a, b):
    # Split into integer and fractional parts
    if '.' in a:
        a_int, a_frac = a.split('.')
    else:
        a_int, a_frac = a, '0'

    if '.' in b:
        b_int, b_frac = b.split('.')
    else:
        b_int, b_frac = b, '0'

 
    max_frac_len = max(len(a_frac), len(b_frac))
    a_frac = a_frac.ljust(max_frac_len, '0')
    b_frac = b_frac.ljust(max_frac_len, '0')

   
    frac_diff = subtract_strings(a_frac, b_frac)
    int_diff = subtract_strings(a_int, b_int)

  
    if len(frac_diff) > max_frac_len:
        int_diff = subtract_strings(int_diff, '1')
        frac_diff = frac_diff[1:]

   
    if frac_diff == '0':
        return int_diff
    else:
        return int_diff + '.' + remove_leading_zeros(frac_diff)

